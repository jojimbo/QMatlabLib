classdef bsLinearInterpolation
    % Description :: Created by Graeme Lawson on the 14/10/11 This has been
    % designed to be a more flexible linear interpolation class allowing
    % specifically more functionality around extrapolation than provided by
    % the standard MatLab library
    
    properties
        extrapolationMethod
    end
    
    methods
        
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Constructor    
        function obj = bsLinearInterpolation()

        end
        
    %%     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Methods and functions    
     
     function y = LinearMatrix(obj, x ,  X , Y ,Truncate )
        
         % Description 
         % Method Linearly interpolates each row of Y for a each row of X
         % Method outputs a new matrix
         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
         % assert( size(x,1) == size(X,1) , 'Matrices sizes x & X dont match')
         assert( size(X,1) == size(Y,1) , 'Matrices sizes X & Y dont match')
         assert( size(X,2) == size(Y,2) , 'Matrices sizes X & Y dont match')
                  
         y = zeros( size(x)); % Allocate storage space
        
         for i = 1 :  size(X,1)            
                 y(i,:) = obj.LinearArray(x(i,1:end),  X(i,1:end) ,  Y(i,1:end), Truncate ) ;
         end
    end  
    
    
    
    function y = LinearArray(obj, x ,  X , Y ,Truncate )
        
         % Description 
         % Create a grid of interpolated points
         % (x, y) are points for which we produce an interpolated number
         % (X, Y) is our raw data points
         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
         if size(X,2) == 1
            X = X';  % Algorithm assumes row inputs rather than column inputs
         end
         
         if size(Y,2) == 1
            Y = Y'; % Algorithm assumes row inputs rather than column inputs
         end
         
         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
         
         y = zeros( 1, size(x,2)); % Allocate storage space
        
         for i = 1 :  size(x,2)            
                 y(1,i) = obj.LinearArraySearch(x(1,i),  X ,  Y, Truncate ) ;
         end
    end  
    
    %%
    
     function y = LinearArraySearch(obj, Current_x ,X ,  Y,  Truncate )
               
        
        % ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        % Calculate the the upper bounds of the matrix axes
        % '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
       
        X_Min = X(1, 1);
        X_Max = X(1, end);
        %'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        %We now need to need the values of X_1,X_2,....., F_21, & F_22 that straddle the
        %point of interest
        
        % Check to see if the point lies outside our grid, set equal to the equivalent end point
        
        if strcmp(lower(Truncate) , 'true')
            
            if Current_x <= X_Min
                y = Y(1, 1);
                return;
            elseif  Current_x >= X_Max
                y = Y(1,end);
                return;
            end
               i = 1 ; %intialise
            
                % ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                % The remaining case is to interpolate within the grid''''''''''''''''''''''''''''''''''''''''
                % ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
               
                for i = 1 : size(X, 2) - 1 % The end points have already been tested
                    if Current_x >= X(1, i ) && Current_x <= X(1, i+1)
                          break % Exit for loop
                    end
                end
                
                
        else
            
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            % The following code interpolates within the grid & extrapolates outwith the grid
            % Get the X-coordinates   
            
            if Current_x <= X_Min
                i = 1;
            elseif Current_x >= X_Max
                i = size(X, 2)-1 ;  % This allows us to use the previous two points to inform us of the gradient
            else
                
                % First calculate the indices i & j
                for i = 1 : size(X, 2) - 1 %The end points have already been tested
                    if Current_x >= X(1, i ) && Current_x <= X(1, i+1)
                        break % Exit for loop
                    end
                end
            end
                
        end
                       
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            % Now use interpolation function            
            X1 = X(1, i  );
            X2 = X(1, i+1);
            F1 = Y(1, i );            
            F2 = Y(1, i+1 );   
            
            y = obj. LinearInterpolation( Current_x , X1 , X2 ,   F1 , F2 );            
            
            return;
            
        end
    
    %%
    function y = LinearInterpolation(obj, X , X1 , X2 ,   F1 , F2 )
        
        % Description :: Created by Graeme Lawson on the 14/10/11
        % X is our independent varaibles for which we want to find an independent value
        % Function linearly interpolates two scalar points (X1 , F1)
        % (X2 , F2)
        % The input data are assume to be monotonic 
        
        %%%%%%%
        % Step 1 ::  Check for Division by Zero       
        Denominator = (X2 - X1) ;
        
        if Denominator == 0            
            error('Division by Zero')            
        end
        %%%%%%%%
        % Step2. :: Check Interpolation is valid = input data is monotonic
        % in the X & Y axis values
        if (X1 > X2) 
             error('Input data must be montonic: Error occurred because X1 > X2')            
        end
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        % Step3. Now proceed to the main calculation        
        y = F1 + ((F2 - F1) / Denominator) * (X- X1) ;
        
    
        
    end
    
      %%  
    function y = BiLinearInterpolation(obj, X , Y ,  X_1 , X_2 ,  Y_1 , Y_2 , ...
                                                   F_11 , F_12 ,   F_21, F_22 )
        
        % Description :: Created by Graeme Lawson on the 14/10/11
        % X and Y are independent varaibles for which we want to find an independent value
        % Function linearly interpolates four scalar points (X_1 , Y1,
        % F_11), (X_1 , Y2, F_12), (X2 , Y1, F_21), & (X2 , Y2, F_22)
        % The input data are assume to be monotonic
        
        %%%%%%%
        % Step 1 ::  Check for Division by Zero
        Denominator = (X_2 - X_1) * (Y_2 - Y_1);
        
        if Denominator == 0
            error('Division by Zero')
        end
        %%%%%%%%
        % Step2. :: Check Interpolation is valid = input data is monotonic
        % in the X & Y axis values
        if (X_1 > X_2)   ||  (Y_1 > Y_2)
            error('Input data must be montonic: Error occurred because either X_1 > X_2 OR Y_2 > Y_1')
        end
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        % Step3. Now proceed to the main calculation
        y = (1 / Denominator) * ((X_2 - X) * (Y_2 - Y) * F_11 +...
            (X - X_1) * (Y_2 - Y) * F_21 + (X_2 - X) * (Y - Y_1) * F_12 +...
            (X - X_1) * (Y - Y_1) * F_22);
        
    end
    
    %The following function interpolates the volatility by Bilinearly
    % Function assumes that the time, & strike have been sorted in increasing order
    
    %%   
    function z = BiLinearMatrix(obj, x , y , X ,  Y , Grid, Truncate )
        
         % Description 
         % Create a grid of interpolated point
         % (x, y, z) are points for which we produce an interpolated number
         % (X, Y, Grid) is our raw data points
         
        
         z = zeros(  size(x,2),size(y,2) ); % Allocate storage space
        
         for i = 1 :  size(x,2)
             for j = 1 :  size(y,2)
                 z(i,j) = obj.BiLinearMatrixSearch(x(1,i) , y(1,j) , X ,  Y , Grid , Truncate ) ;
             end
         end
    end   
    
    %%
    function y = BiLinearMatrixSearch(obj, Current_x , Current_y , X ,  Y , Grid , Truncate )
        
        
        
        % ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        % Calculate the the upper bounds of the matrix axes
        % '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        Y_Min = Y(1, 1);
        Y_Max = Y(1, end);
        X_Min = X(1, 1);
        X_Max = X(1, end);
        %'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        %We now need to need the values of X_1,X_2,....., F_21, & F_22 that straddle the
        %point of interest
        
        % Check to see if the point lies outside our grid, set equal to the equivalent end point
        
        if strcmp(lower(Truncate) , 'true')
            
            if Current_y <= Y_Min && Current_x <= X_Min
                y = Grid(1, 1);
                return;
            elseif Current_y <= Y_Min && Current_x >= X_Max
                y = Grid(end, 1);
                return;
            elseif Current_y >= Y_Max && Current_x <= X_Min
                y = Grid(1, end);
                return;
            elseif Current_y >= Y_Max && Current_x >= X_Max 
                y = Grid(end, end);
                return;
            end
            
            
            %'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            % Check to see if the point lies on the either of the time boundaries
            % '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            
            i = 1 ; %intialise
            j = 1 ; %intialise
            % k = 0 ; %intialise
            
            if Current_y <= Y_Min
                for i = 1 : size(X, 2)-1 % The end points have already been tested
                    if Current_x >= X(1, i ) && Current_x <= X(1,i+1)
                        % Reduces to linear interpolation
                        y = (Current_x - X(1, i )) / (X(1,i+1) - X(1,i )) ...
                            * Grid(i+1, 1) + Grid(i , 1) * ...
                            (1 - (Current_x - X(1,i )) ...
                            / (X(1, i+1) - X(1, i )));
                       return;
                    end
                end
                
            elseif Current_y >= Y_Max
                for i = 1 : size(X, 2) - 1 % The end points have already been tested
                    if Current_x >= X(1,i ) && Current_x <= X(1, i+1)
                        
                        y = (Current_x - X(1, i )) / (X(1, i+1) - X(1,i )) ...
                            * Grid(i+1, size(Y, 2)) + Grid(i , size(Y, 2)) * ...
                            (1 - (Current_x - X(1, i )) ...
                            / (X(1,i+1) - X(1,i )));
                       return;
                    end
                end
            end
            
            % '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            % Check to see if the point lies on the either of the strikes boundaries
            % '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            
            if Current_x <= X_Min
                for i = 1 : size(Y, 2) - 1  % The end points have already been tested
                    if Current_y >= Y(1, i ) && Current_y <= Y(1, i+1)
                        
                        y = (Current_y - Y(1, i )) / (Y(1, i+1) - Y(1, i )) ...
                            * Grid(1, i+1) + Grid(1, i ) * ...
                            (1 - (Current_y - Y(1, i ))...
                            / (Y(1, i+1) - Y(1, i )));
                        
                        return;
                    end
                end
            elseif Current_x >= X_Max
                for i = 1 : size(Y, 2) - 1 % The end points have already been tested
                    if Current_y >= Y(1, i ) && Current_y <= Y(1, i+1)
                        
                        y = (Current_y - Y(1, i )) / (Y(1, i+1) - Y(1, i ))...
                            * Grid(size(X, 2), i+1) + Grid(size(X, 2), i ) * ...
                            (1 - (Current_y - Y(1, i ))...
                            / (Y(1, i+1) - Y(1, i )));
                        return;
                    end
                end
                end
                
                %''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                %The remaining case is to interpolate within the grid''''''''''''''''''''''''''''''''''''''''
                % ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                %First calculate the indices i & j
                for i = 1 : size(X, 2) - 1 % The end points have already been tested
                    if Current_x >= X(1, i ) && Current_x <= X(1, i+1)
                          break % Exit for loop
                    end
                end
                
                for j = 1 : size(Y, 2) - 1 % The end points have already been tested
                    if Current_y >= Y(1, j ) && Current_y <= Y(1, j+1) 
                          break % Exit for loop
                    end
                end
                
                
        else
            
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            % The following code interpolates within the grid & extrapolates outwith the grid
            
            % Get the X-coordinates   
            
            if Current_x <= X_Min
                i = 1;
            elseif Current_x >= X_Max
                i = size(X, 2)-1 ;  % This allows us to use the previous two points to inform us of the gradient
            else
                
                % First calculate the indices i & j
                for i = 1 : size(X, 2) - 1 %The end points have already been tested
                    if Current_x >= X(1, i ) && Current_x <= X(1, i+1)
                         break % Exit for loop
                    end
                end
                
            end
            
            
            % Get the Y-coordinates            
            
            if Current_y <= Y_Min
                j = 1;
            elseif Current_y >= Y_Max
                j = size(Y, 2) -1 ;  % This allows us to use the previous two points to inform us of the gradient
            else
                
                for j = 1 : size(Y, 2) - 1 % The end points have already been tested
                    if Current_y >= Y(1, j ) && Current_y <= Y(1, j+1) 
                        break % Exit for loop
                    end
                end
                
            end
                
                
        end
            
           
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            % Now use interpolation function
            
            X_1 = X(1, i  );
            X_2 = X(1, i+1);
            Y_1 = Y(1, j );
            Y_2 = Y(1, j+1);
            
            F_11 = Grid(i , j );
            F_12 = Grid(i , j+1);
            F_21 = Grid(i+1, j );
            F_22 = Grid(i+1, j+1);
            
            y = obj.BiLinearInterpolation(Current_x, Current_y, X_1, X_2, ...
                Y_1, Y_2, F_11, F_12, F_21, F_22);
            
            return;
            
            
            
    end
    
    
        
    
    end

end

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          